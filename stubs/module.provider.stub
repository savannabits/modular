<?php

namespace {{ namespace }};

use Illuminate\Support\Str;
use Illuminate\Support\Stringable;
use Spatie\LaravelPackageTools\Commands\InstallCommand;
use Spatie\LaravelPackageTools\Package;
use Spatie\LaravelPackageTools\PackageServiceProvider;

class {{ class }} extends PackageServiceProvider
{
    public static string $name = '{{ name }}';
    public static string $viewNamespace = '{{ name }}';
    public function configurePackage(Package $package): void
    {
        $package->name(static::$name)
            ->hasViews(static::$viewNamespace)
            ->hasCommands($this->getCommands())
            ->hasInstallCommand(function (InstallCommand $command) {
                $command
                    ->askToRunMigrations()
                    ->endWith(fn (InstallCommand $command) => $this->furtherInstallationSteps($command));
            });
        $this->loadMigrationsFrom($this->package->basePath('/../database/migrations'));
    }

    public function packageRegistered(): void
    {
        foreach ($this->getProviders() as $provider) {
            $this->app->register($provider);
        }
    }

    private function furtherInstallationSteps(InstallCommand $command)
    {
        //
    }

    private function getMigrationFiles(): array
    {
        return array_merge($this->discoverMigrations(), [
            // Your other migrations
        ]);
    }

    private function getCommands(): array
    {
        return array_merge($this->discoverCommands(), [
            // Your other commands
        ]);
    }

    private function getProviders(): array
    {
        return array_merge($this->discoverProviders(), [
            // Your other providers
        ]);
    }

    private function discoverMigrations(): array
    {
        // Get an array of file names from the migrations directory
        $glob1 = glob($this->package->basePath('/../database/migrations/*.php'));
        $glob2 = glob($this->package->basePath('/../database/migrations/**/*.php'));

        return collect($glob1)
            ->merge($glob2)
            ->map(fn ($filename) => Str::of($filename)
                ->afterLast('/')
                ->rtrim('.php.stub')
                ->rtrim('.php')->toString()
            )
            ->toArray();
    }

    private function discoverCommands(): array
    {
        // automatically include all namespace classes in the Console directory
        // use glob to return full paths to all files in the Console directory

        $paths = array_merge(
            glob($this->package->basePath('/Console/Commands/*.php')),
            glob($this->package->basePath('/Console/Commands/**/*.php'))
        );

        return collect($paths)
            ->map(fn ($filename) => $this->getNamespaceFromFile($filename)->toString())
            ->toArray();
    }
    private function discoverProviders(): array
    {
        // automatically include all namespace classes in the Console directory
        // use glob to return full paths to all files in the Console directory

        $paths = array_merge(
            glob($this->package->basePath('/Providers/*.php')),
            glob($this->package->basePath('/Providers/**/*.php'))
        );

        return collect($paths)
            ->map(fn ($filename) => $this->getNamespaceFromFile($filename)->toString())
            ->toArray();
    }

    private function getNamespaceFromFile($path): Stringable
    {
        return $this->getFullNamespace(Str::of($path)->afterLast('app/')
            ->replace('/', '\\')
            ->studly()->rtrim('.php'));
    }

    private function getFullNamespace(string $relativeNamespace = ''): Stringable
    {
        return Str::of(static::$name)->studly()
            ->prepend(trim(config('modular.namespace','Modules'),'\\').'\\')
            ->append('\\')
            ->append(Str::studly($relativeNamespace));
    }
}
